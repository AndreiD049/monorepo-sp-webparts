import { ICustomerFlow, IFlowLocation, IProcess } from '@service/process-flow';
import { Dialog, Text } from 'office-ui-fabric-react';
import * as React from 'react';
import { MainService } from '../../services/main-service';
import styles from './ProcessFlowTable.module.scss';

export interface IProcessFlowTableProps {
    flow?: ICustomerFlow;
}

/**
Id: number;
System: string;
Procedure: string;
Category: string;
FlowId: number;
Manuals: string[];
 */
const NewProcess: React.FC<{
    systems: string[];
    processes: string[];
    categories: string[];
    flow: ICustomerFlow;
    onCloseForm: () => void;
    onNewProcess: (id: number) => void;
}> = (props) => {
    const processService = MainService.ProcessService;
    const [system, setSystem] = React.useState('');
    const [category, setCategory] = React.useState('');
    const [process, setProcess] = React.useState('');

    const handleCreate = async (): Promise<void> => {
        const newProcess = await processService.addProcess({
            System: system,
            Process: process,
            Category: category,
            FlowId: props.flow.Id,
        });
        props.onNewProcess(newProcess.data.Id);
    };

    return (
        <div>
            <div>
                <label style={{ display: 'block' }} htmlFor="System">
                    System:
                </label>
                <input
                    list="systemChoices"
                    id="system"
                    value={system}
                    onChange={(ev) => setSystem(ev.target.value)}
                />

                <datalist id="systemChoices">
                    {props.systems.map((s) => (
                        <option key={s} value={s} />
                    ))}
                </datalist>
            </div>
            <div>
                <label style={{ display: 'block' }} htmlFor="Process">
                    Process:
                </label>
                <input
                    list="processList"
                    id="Process"
                    value={process}
                    onChange={(ev) => setProcess(ev.target.value)}
                />

                <datalist id="processList">
                    {props.processes.map((p) => (
                        <option key={p} value={p} />
                    ))}
                </datalist>
            </div>
            <div>
                <label style={{ display: 'block' }} htmlFor="Category">
                    Category:
                </label>
                <input
                    list="categoryChoices"
                    id="Category"
                    value={category}
                    onChange={(ev) => setCategory(ev.target.value)}
                />

                <datalist id="categoryChoices">
                    {props.categories.map((c) => (
                        <option key={c} value={c} />
                    ))}
                </datalist>
            </div>
            <button onClick={handleCreate}>Create</button>
            <button onClick={props.onCloseForm}>Cancel</button>
        </div>
    );
};

const NewLocationDialog: React.FC<{ hidden: boolean; onHide: () => void }> = (
    props
) => {
    return (
        <Dialog
            hidden={props.hidden}
            onDismiss={props.onHide}
            modalProps={{ isBlocking: false }}
        >
            test
        </Dialog>
    );
};

const Process: React.FC<{
    process: IProcess;
    flow: ICustomerFlow;
    locations: IFlowLocation[];
}> = (props) => {
    const [newDialog, setNewDialog] = React.useState(false);

    return (
        <div
            style={{
                display: 'flex',
                flexFlow: 'row nowrap',
                gap: '.3em',
                alignItems: 'center',
                justifyContent: 'flex-start',
            }}
        >
            <div>
                <p>{props.process.Process}</p>
            </div>
            <div>
                <span>Locations: </span>
                <button onClick={() => setNewDialog(true)}>+</button>
                <NewLocationDialog
                    hidden={!newDialog}
                    onHide={() => setNewDialog(false)}
                />
            </div>
        </div>
    );
};

export const ProcessFlowTable: React.FC<IProcessFlowTableProps> = (props) => {
    const { ProcessService, FlowLocationService } = MainService;
    const [systems, setSystems] = React.useState([]);
    const [processOptions, setProcessOptions] = React.useState([]);
    const [locationOptions, setLocationOptions] = React.useState([]);
    const [categories, setCategories] = React.useState([]);
    const [showNew, setShowNew] = React.useState<boolean>(false);
    const [processes, setProcesses] = React.useState<IProcess[]>([]);
    const [flowLocations, setFlowLocations] = React.useState<IFlowLocation[]>(
        []
    );

    React.useEffect(() => {
        async function run(): Promise<void> {
            setSystems(await ProcessService.getSystemChoices());
            setProcessOptions(await ProcessService.getProcessOptions());
            setCategories(await ProcessService.getCategoryOptions());
        }
        run().catch((err) => console.error(err));
    }, []);

    React.useEffect(() => {
        async function run(): Promise<void> {
            if (props.flow) {
                setProcesses(await ProcessService.getByFlow(props.flow.Id));
                setFlowLocations(
                    await FlowLocationService.getByFlow(props.flow.Id)
                );
            }
        }
        run().catch((err) => console.error(err));
    }, [props.flow]);

    if (!props.flow) return null;

    return (
        <div className={styles.container}>
            <Text variant="medium" block>
                {props.flow.Flow} selected
            </Text>
            <button onClick={() => setShowNew(true)}>New process</button>
            {showNew ? (
                <NewProcess
                    systems={systems}
                    processes={processOptions}
                    categories={categories}
                    flow={props.flow}
                    onCloseForm={() => setShowNew(false)}
                    onNewProcess={async (id) => {
                        const newProcess = await ProcessService.getProcess(id);
                        setProcesses((prev) => [...prev, newProcess]);
                        setShowNew(false);
                    }}
                />
            ) : null}
            {processes.map((p) => (
                <Process
                    key={p.Id}
                    process={p}
                    flow={props.flow}
                    locations={flowLocations.filter(
                        (l) => l.Process.Id === p.Id
                    )}
                />
            ))}
        </div>
    );
};
